{
  "pipes": [],
  "interfaces": [
    {
      "name": "MenuItem",
      "id": "interface-MenuItem-3959c4d406b1c0c55f11136ef6e5e41c35299e85382f8693e5856addd5cd88a60c6f346401026017ebf231ccc8e53213e6d415a44268f6be4e70e917e335192e",
      "file": "src/app/components/sidemenu/sidemenu.component.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Component, Input } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { DomSanitizer, SafeHtml } from \"@angular/platform-browser\";\r\n\r\ninterface MenuItem {\r\n  label: string;\r\n  icon?: string;\r\n  leftIcon?: string;\r\n  href: string;\r\n  active?: boolean;\r\n  children?: MenuItem[];\r\n  badge?: string;\r\n}\r\n\r\n@Component({\r\n  selector: \"app-sidemenu\",\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: `\r\n    <div class=\"flex h-screen\">\r\n      <!-- Sidebar -->\r\n      <div [class]=\"containerClasses\">\r\n        <!-- Logo section -->\r\n        <div class=\"flex h-16 items-center border-b px-4\">\r\n          <span class=\"text-lg font-semibold\">{{ brand }}</span>\r\n        </div>\r\n\r\n        <!-- Menu items -->\r\n        <nav class=\"flex-1 space-y-1 px-2 py-4\">\r\n          <ng-container *ngFor=\"let item of menuItems\">\r\n            <!-- Item with children -->\r\n            <div *ngIf=\"item.children; else singleItem\" class=\"space-y-1\">\r\n              <button\r\n                (click)=\"toggleSubmenu(item)\"\r\n                [class]=\"getParentMenuClasses(item.active)\"\r\n              >\r\n                <span class=\"flex items-center\">\r\n                  <span\r\n                    *ngIf=\"item.leftIcon\"\r\n                    class=\"mr-2\"\r\n                    [innerHTML]=\"sanitizeIcon(item.leftIcon)\"\r\n                  ></span>\r\n                  <span\r\n                    *ngIf=\"item.icon\"\r\n                    class=\"mr-3\"\r\n                    [innerHTML]=\"sanitizeIcon(item.icon)\"\r\n                  ></span>\r\n                  {{ item.label }}\r\n                  <span *ngIf=\"item.badge\" [class]=\"getBadgeClasses()\">\r\n                    {{ item.badge }}\r\n                  </span>\r\n                </span>\r\n                <span class=\"ml-auto\">\r\n                  <svg\r\n                    [class]=\"item.active ? 'rotate-180 transform' : ''\"\r\n                    class=\"h-4 w-4 transition-transform\"\r\n                    fill=\"none\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    stroke=\"currentColor\"\r\n                  >\r\n                    <path\r\n                      stroke-linecap=\"round\"\r\n                      stroke-linejoin=\"round\"\r\n                      stroke-width=\"2\"\r\n                      d=\"M19 9l-7 7-7-7\"\r\n                    />\r\n                  </svg>\r\n                </span>\r\n              </button>\r\n\r\n              <!-- Submenu -->\r\n              <div *ngIf=\"item.active\" class=\"space-y-1 pl-4\">\r\n                <a\r\n                  *ngFor=\"let child of item.children\"\r\n                  [href]=\"child.href\"\r\n                  [class]=\"getSubmenuClasses(child.active)\"\r\n                >\r\n                  <span class=\"flex w-full items-center justify-between\">\r\n                    <span class=\"flex items-center\">\r\n                      <span\r\n                        *ngIf=\"child.leftIcon\"\r\n                        class=\"mr-2\"\r\n                        [innerHTML]=\"sanitizeIcon(child.leftIcon)\"\r\n                      ></span>\r\n                      <span\r\n                        *ngIf=\"child.icon\"\r\n                        class=\"mr-3\"\r\n                        [innerHTML]=\"sanitizeIcon(child.icon)\"\r\n                      ></span>\r\n                      {{ child.label }}\r\n                    </span>\r\n                    <span *ngIf=\"child.badge\" [class]=\"getBadgeClasses()\">\r\n                      {{ child.badge }}\r\n                    </span>\r\n                  </span>\r\n                </a>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Single item -->\r\n            <ng-template #singleItem>\r\n              <a [href]=\"item.href\" [class]=\"getMenuItemClasses(item.active)\">\r\n                <span class=\"flex w-full items-center justify-between\">\r\n                  <span class=\"flex items-center\">\r\n                    <span\r\n                      *ngIf=\"item.leftIcon\"\r\n                      class=\"mr-2\"\r\n                      [innerHTML]=\"sanitizeIcon(item.leftIcon)\"\r\n                    ></span>\r\n                    <span\r\n                      *ngIf=\"item.icon\"\r\n                      class=\"mr-3\"\r\n                      [innerHTML]=\"sanitizeIcon(item.icon)\"\r\n                    ></span>\r\n                    {{ item.label }}\r\n                  </span>\r\n                  <span *ngIf=\"item.badge\" [class]=\"getBadgeClasses()\">\r\n                    {{ item.badge }}\r\n                  </span>\r\n                </span>\r\n              </a>\r\n            </ng-template>\r\n          </ng-container>\r\n        </nav>\r\n      </div>\r\n    </div>\r\n  `,\r\n})\r\nexport class SidemenuComponent {\r\n  @Input() variant: \"light\" | \"dark\" = \"light\";\r\n  @Input() brand: string = \"Dashboard\";\r\n  @Input() menuItems: MenuItem[] = [];\r\n  @Input() collapsed: boolean = false;\r\n\r\n  constructor(private sanitizer: DomSanitizer) {}\r\n\r\n  sanitizeIcon(icon: string): SafeHtml {\r\n    return this.sanitizer.bypassSecurityTrustHtml(icon);\r\n  }\r\n\r\n  get containerClasses(): string {\r\n    const baseClasses = \"flex flex-col w-64 transition-all duration-300\";\r\n    return this.variant === \"light\"\r\n      ? `${baseClasses} bg-white border-r`\r\n      : `${baseClasses} bg-gray-800 border-gray-700`;\r\n  }\r\n\r\n  getMenuItemClasses(isActive: boolean = false): string {\r\n    const baseClasses =\r\n      \"flex items-center px-4 py-2 text-sm rounded-md transition-colors\";\r\n\r\n    if (this.variant === \"light\") {\r\n      return isActive\r\n        ? `${baseClasses} bg-blue-100 text-blue-700`\r\n        : `${baseClasses} text-gray-700 hover:bg-gray-100`;\r\n    } else {\r\n      return isActive\r\n        ? `${baseClasses} bg-gray-900 text-white`\r\n        : `${baseClasses} text-gray-300 hover:bg-gray-700 hover:text-white`;\r\n    }\r\n  }\r\n\r\n  getParentMenuClasses(isActive: boolean = false): string {\r\n    const baseClasses =\r\n      \"flex items-center justify-between w-full px-4 py-2 text-sm rounded-md transition-colors\";\r\n\r\n    if (this.variant === \"light\") {\r\n      return isActive\r\n        ? `${baseClasses} bg-gray-100 text-gray-900`\r\n        : `${baseClasses} text-gray-700 hover:bg-gray-100`;\r\n    } else {\r\n      return isActive\r\n        ? `${baseClasses} bg-gray-700 text-white`\r\n        : `${baseClasses} text-gray-300 hover:bg-gray-700 hover:text-white`;\r\n    }\r\n  }\r\n\r\n  getSubmenuClasses(isActive: boolean = false): string {\r\n    const baseClasses =\r\n      \"flex items-center px-4 py-2 text-sm rounded-md transition-colors\";\r\n\r\n    if (this.variant === \"light\") {\r\n      return isActive\r\n        ? `${baseClasses} bg-blue-50 text-blue-700`\r\n        : `${baseClasses} text-gray-600 hover:bg-gray-50`;\r\n    } else {\r\n      return isActive\r\n        ? `${baseClasses} bg-gray-700 text-white`\r\n        : `${baseClasses} text-gray-400 hover:bg-gray-700 hover:text-white`;\r\n    }\r\n  }\r\n\r\n  getBadgeClasses(): string {\r\n    const baseClasses = \"ml-2 px-2 py-0.5 text-xs font-medium rounded-full\";\r\n    return this.variant === \"light\"\r\n      ? `${baseClasses} bg-blue-100 text-blue-800`\r\n      : `${baseClasses} bg-gray-700 text-gray-200`;\r\n  }\r\n\r\n  toggleSubmenu(item: MenuItem): void {\r\n    item.active = !item.active;\r\n  }\r\n}\r\n",
      "properties": [
        {
          "name": "active",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "indexKey": "",
          "optional": true,
          "description": "",
          "line": 10
        },
        {
          "name": "badge",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": true,
          "description": "",
          "line": 12
        },
        {
          "name": "children",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "MenuItem[]",
          "indexKey": "",
          "optional": true,
          "description": "",
          "line": 11
        },
        {
          "name": "href",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "icon",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": true,
          "description": "",
          "line": 7
        },
        {
          "name": "label",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "leftIcon",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": true,
          "description": "",
          "line": 8
        }
      ],
      "indexSignatures": [],
      "kind": 171,
      "methods": [],
      "extends": []
    }
  ],
  "injectables": [],
  "guards": [],
  "interceptors": [],
  "classes": [],
  "directives": [],
  "components": [
    {
      "name": "AppComponent",
      "id": "component-AppComponent-a4d3904731676a58611443c027629e93f98f345d0600eb1c2d67e94245aff2915e5febee44a63bcbbb862d86a99b62b67198ed1b3fd96a5a43468a6af3564eec",
      "file": "src/app/app.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-root",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./app.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "title",
          "defaultValue": "\"angular-xui\"",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 13
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "RouterOutlet"
        },
        {
          "name": "ButtonComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from \"@angular/core\";\r\nimport { RouterOutlet } from \"@angular/router\";\r\nimport { ButtonComponent } from \"./components/button/button.component\";\r\n\r\n@Component({\r\n  selector: \"app-root\",\r\n  standalone: true,\r\n  imports: [RouterOutlet, ButtonComponent],\r\n  templateUrl: \"./app.component.html\",\r\n  styleUrl: \"./app.component.scss\",\r\n})\r\nexport class AppComponent {\r\n  title = \"angular-xui\";\r\n}\r\n",
      "styleUrl": "./app.component.scss",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "extends": [],
      "templateData": "<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * * The content below * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * is only a placeholder * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * and can be replaced.  * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * Delete the template below * * * * * * * * * -->\r\n<!-- * * * * * * * to get started with your project! * * * * * * * -->\r\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\r\n\r\n<style>\r\n  :host {\r\n    --bright-blue: oklch(51.01% 0.274 263.83);\r\n    --electric-violet: oklch(53.18% 0.28 296.97);\r\n    --french-violet: oklch(47.66% 0.246 305.88);\r\n    --vivid-pink: oklch(69.02% 0.277 332.77);\r\n    --hot-red: oklch(61.42% 0.238 15.34);\r\n    --orange-red: oklch(63.32% 0.24 31.68);\r\n\r\n    --gray-900: oklch(19.37% 0.006 300.98);\r\n    --gray-700: oklch(36.98% 0.014 302.71);\r\n    --gray-400: oklch(70.9% 0.015 304.04);\r\n\r\n    --red-to-pink-to-purple-vertical-gradient: linear-gradient(\r\n      180deg,\r\n      var(--orange-red) 0%,\r\n      var(--vivid-pink) 50%,\r\n      var(--electric-violet) 100%\r\n    );\r\n\r\n    --red-to-pink-to-purple-horizontal-gradient: linear-gradient(\r\n      90deg,\r\n      var(--orange-red) 0%,\r\n      var(--vivid-pink) 50%,\r\n      var(--electric-violet) 100%\r\n    );\r\n\r\n    --pill-accent: var(--bright-blue);\r\n\r\n    font-family:\r\n      \"Inter\",\r\n      -apple-system,\r\n      BlinkMacSystemFont,\r\n      \"Segoe UI\",\r\n      Roboto,\r\n      Helvetica,\r\n      Arial,\r\n      sans-serif,\r\n      \"Apple Color Emoji\",\r\n      \"Segoe UI Emoji\",\r\n      \"Segoe UI Symbol\";\r\n    box-sizing: border-box;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n  }\r\n\r\n  h1 {\r\n    font-size: 3.125rem;\r\n    color: var(--gray-900);\r\n    font-weight: 500;\r\n    line-height: 100%;\r\n    letter-spacing: -0.125rem;\r\n    margin: 0;\r\n    font-family:\r\n      \"Inter Tight\",\r\n      -apple-system,\r\n      BlinkMacSystemFont,\r\n      \"Segoe UI\",\r\n      Roboto,\r\n      Helvetica,\r\n      Arial,\r\n      sans-serif,\r\n      \"Apple Color Emoji\",\r\n      \"Segoe UI Emoji\",\r\n      \"Segoe UI Symbol\";\r\n  }\r\n\r\n  p {\r\n    margin: 0;\r\n    color: var(--gray-700);\r\n  }\r\n\r\n  main {\r\n    width: 100%;\r\n    min-height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 1rem;\r\n    box-sizing: inherit;\r\n    position: relative;\r\n  }\r\n\r\n  .angular-logo {\r\n    max-width: 9.2rem;\r\n  }\r\n\r\n  .content {\r\n    display: flex;\r\n    justify-content: space-around;\r\n    width: 100%;\r\n    max-width: 700px;\r\n    margin-bottom: 3rem;\r\n  }\r\n\r\n  .content h1 {\r\n    margin-top: 1.75rem;\r\n  }\r\n\r\n  .content p {\r\n    margin-top: 1.5rem;\r\n  }\r\n\r\n  .divider {\r\n    width: 1px;\r\n    background: var(--red-to-pink-to-purple-vertical-gradient);\r\n    margin-inline: 0.5rem;\r\n  }\r\n\r\n  .pill-group {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: start;\r\n    flex-wrap: wrap;\r\n    gap: 1.25rem;\r\n  }\r\n\r\n  .pill {\r\n    display: flex;\r\n    align-items: center;\r\n    --pill-accent: var(--bright-blue);\r\n    background: color-mix(in srgb, var(--pill-accent) 5%, transparent);\r\n    color: var(--pill-accent);\r\n    padding-inline: 0.75rem;\r\n    padding-block: 0.375rem;\r\n    border-radius: 2.75rem;\r\n    border: 0;\r\n    transition: background 0.3s ease;\r\n    font-family: var(--inter-font);\r\n    font-size: 0.875rem;\r\n    font-style: normal;\r\n    font-weight: 500;\r\n    line-height: 1.4rem;\r\n    letter-spacing: -0.00875rem;\r\n    text-decoration: none;\r\n  }\r\n\r\n  .pill:hover {\r\n    background: color-mix(in srgb, var(--pill-accent) 15%, transparent);\r\n  }\r\n\r\n  .pill-group .pill:nth-child(6n + 1) {\r\n    --pill-accent: var(--bright-blue);\r\n  }\r\n  .pill-group .pill:nth-child(6n + 2) {\r\n    --pill-accent: var(--french-violet);\r\n  }\r\n  .pill-group .pill:nth-child(6n + 3),\r\n  .pill-group .pill:nth-child(6n + 4),\r\n  .pill-group .pill:nth-child(6n + 5) {\r\n    --pill-accent: var(--hot-red);\r\n  }\r\n\r\n  .pill-group svg {\r\n    margin-inline-start: 0.25rem;\r\n  }\r\n\r\n  .social-links {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 0.73rem;\r\n    margin-top: 1.5rem;\r\n  }\r\n\r\n  .social-links path {\r\n    transition: fill 0.3s ease;\r\n    fill: var(--gray-400);\r\n  }\r\n\r\n  .social-links a:hover svg path {\r\n    fill: var(--gray-900);\r\n  }\r\n\r\n  @media screen and (max-width: 650px) {\r\n    .content {\r\n      flex-direction: column;\r\n      width: max-content;\r\n    }\r\n\r\n    .divider {\r\n      height: 1px;\r\n      width: 100%;\r\n      background: var(--red-to-pink-to-purple-horizontal-gradient);\r\n      margin-block: 1.5rem;\r\n    }\r\n  }\r\n</style>\r\n\r\n<div class=\"min-h-screen bg-gray-100 p-8\">\r\n  <h1 class=\"text-4xl font-bold text-blue-600\">Welcome to {{ title }}</h1>\r\n  <p class=\"mt-4 text-gray-600\">Your Angular app with Tailwind CSS is ready!</p>\r\n  <div class=\"mt-4 space-x-4\">\r\n    <app-button label=\"Primary Button\" variant=\"primary\"></app-button>\r\n    <app-button\r\n      label=\"With Icon\"\r\n      variant=\"secondary\"\r\n      iconRight=\"→\"\r\n    ></app-button>\r\n    <app-button label=\"Outline Button\" variant=\"outline\"></app-button>\r\n  </div>\r\n</div>\r\n<router-outlet />\r\n\r\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * * The content above * * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * is only a placeholder * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * and can be replaced.  * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * End of Placeholder  * * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\r\n"
    },
    {
      "name": "ButtonComponent",
      "id": "component-ButtonComponent-5e946814f6417ea40dbca73dbfc301be9f8fc054da3f4126bb00493a3ce6c2711f1912f539d08df2c5962c2a3a77825d666bea5aa95e77ebee3a75bc4fe08e04",
      "file": "src/app/components/button/button.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-button",
      "styleUrls": [],
      "styles": [],
      "template": "<button\n  [class]=\"buttonClasses\"\n  [disabled]=\"disabled\"\n  (click)=\"handleClick()\"\n>\n  <span class=\"flex items-center gap-2\">\n    <span *ngIf=\"iconLeft\" class=\"icon-left\">{{ iconLeft }}</span>\n    <ng-content></ng-content>\n    <span *ngIf=\"iconRight\" class=\"icon-right\">{{ iconRight }}</span>\n  </span>\n</button>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "disabled",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 47,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "iconLeft",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 48,
          "type": "string",
          "decorators": []
        },
        {
          "name": "iconRight",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 49,
          "type": "string",
          "decorators": []
        },
        {
          "name": "size",
          "defaultValue": "\"medium\"",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 46,
          "type": "\"small\" | \"medium\" | \"large\"",
          "decorators": []
        },
        {
          "name": "variant",
          "defaultValue": "\"primary\"",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 45,
          "type": "\"primary\" | \"secondary\" | \"outline\" | \"danger\"",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "clicked",
          "defaultValue": "new EventEmitter<void>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 50,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "handleClick",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 56,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input, Output, EventEmitter } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { cva } from \"class-variance-authority\";\r\n\r\nconst buttonVariants = cva(\"px-4 py-2 rounded-md\", {\r\n  variants: {\r\n    variant: {\r\n      primary: \"bg-blue-600 text-white hover:bg-blue-700\",\r\n      secondary: \"bg-gray-600 text-white hover:bg-gray-700\",\r\n      outline:\r\n        \"border border-blue-600 text-blue-600 hover:bg-blue-600 hover:text-white\",\r\n      danger: \"bg-red-600 text-white hover:bg-red-700\",\r\n    },\r\n    size: {\r\n      small: \"text-sm\",\r\n      medium: \"text-base\",\r\n      large: \"text-lg\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    variant: \"primary\",\r\n    size: \"medium\",\r\n  },\r\n});\r\n\r\n@Component({\r\n  selector: \"app-button\",\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: `\r\n    <button\r\n      [class]=\"buttonClasses\"\r\n      [disabled]=\"disabled\"\r\n      (click)=\"handleClick()\"\r\n    >\r\n      <span class=\"flex items-center gap-2\">\r\n        <span *ngIf=\"iconLeft\" class=\"icon-left\">{{ iconLeft }}</span>\r\n        <ng-content></ng-content>\r\n        <span *ngIf=\"iconRight\" class=\"icon-right\">{{ iconRight }}</span>\r\n      </span>\r\n    </button>\r\n  `,\r\n})\r\nexport class ButtonComponent {\r\n  @Input() variant: \"primary\" | \"secondary\" | \"outline\" | \"danger\" = \"primary\";\r\n  @Input() size: \"small\" | \"medium\" | \"large\" = \"medium\";\r\n  @Input() disabled: boolean = false;\r\n  @Input() iconLeft?: string;\r\n  @Input() iconRight?: string;\r\n  @Output() clicked = new EventEmitter<void>();\r\n\r\n  get buttonClasses(): string {\r\n    return buttonVariants({ variant: this.variant, size: this.size });\r\n  }\r\n\r\n  handleClick() {\r\n    this.clicked.emit();\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "extends": [],
      "accessors": {
        "buttonClasses": {
          "name": "buttonClasses",
          "getSignature": {
            "name": "buttonClasses",
            "type": "string",
            "returnType": "string",
            "line": 52
          }
        }
      }
    },
    {
      "name": "CardComponent",
      "id": "component-CardComponent-8ca47b362268b903a8d77f449bc93e612212adf16e45fcf83fac0d21a27a106eb28c5e4c778ba9d36f47195b5d7cbc2eb21836a7f0ed7f7790c96c0fd565b536",
      "file": "src/app/components/card/card.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-card",
      "styleUrls": [],
      "styles": [],
      "template": "<div [class]=\"cardClasses\" [ngStyle]=\"backgroundImageStyle\">\n  <!-- Background Image Placeholder -->\n  <div\n    *ngIf=\"shouldShowImage('background')\"\n    class=\"absolute inset-0 flex animate-pulse items-center justify-center bg-gray-200 dark:bg-gray-700\"\n  >\n    <svg\n      class=\"h-12 w-12 text-gray-400\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      viewBox=\"0 0 24 24\"\n    >\n      <path\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        stroke-width=\"2\"\n        d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\"\n      />\n    </svg>\n  </div>\n\n  <div [class]=\"containerClasses\">\n    <!-- Left Image -->\n    <div *ngIf=\"shouldShowImage('left')\" [class]=\"mediaClasses\">\n      <div\n        *ngIf=\"!imageUrl\"\n        class=\"flex h-full w-full animate-pulse items-center justify-center bg-gray-200 dark:bg-gray-700\"\n      >\n        <svg\n          class=\"h-12 w-12 text-gray-400\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            stroke-width=\"2\"\n            d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\"\n          />\n        </svg>\n      </div>\n      <img\n        *ngIf=\"imageUrl\"\n        [src]=\"imageUrl\"\n        [alt]=\"imageAlt\"\n        class=\"h-full w-full object-cover\"\n      />\n    </div>\n\n    <div class=\"relative flex flex-1 flex-col\">\n      <!-- Top Image -->\n      <div *ngIf=\"shouldShowImage('top')\" [class]=\"mediaClasses\">\n        <div\n          *ngIf=\"!imageUrl\"\n          class=\"flex h-full w-full animate-pulse items-center justify-center bg-gray-200 dark:bg-gray-700\"\n        >\n          <svg\n            class=\"h-12 w-12 text-gray-400\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            viewBox=\"0 0 24 24\"\n          >\n            <path\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n              stroke-width=\"2\"\n              d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\"\n            />\n          </svg>\n        </div>\n        <img\n          *ngIf=\"imageUrl\"\n          [src]=\"imageUrl\"\n          [alt]=\"imageAlt\"\n          class=\"h-full w-full object-cover\"\n        />\n      </div>\n\n      <!-- Card Header -->\n      <div *ngIf=\"title || subtitle\" [class]=\"headerClasses\">\n        <div *ngIf=\"title\" class=\"text-lg font-semibold\">{{ title }}</div>\n        <div\n          *ngIf=\"subtitle\"\n          class=\"text-sm text-gray-600 dark:text-gray-400\"\n        >\n          {{ subtitle }}\n        </div>\n      </div>\n\n      <!-- Card Content -->\n      <div [class]=\"contentClasses\">\n        <ng-content></ng-content>\n      </div>\n\n      <!-- Card Footer -->\n      <div *ngIf=\"footer\" [class]=\"footerClasses\">\n        <ng-content select=\"[footer]\"></ng-content>\n      </div>\n\n      <!-- Bottom Image -->\n      <div *ngIf=\"shouldShowImage('bottom')\" [class]=\"mediaClasses\">\n        <div\n          *ngIf=\"!imageUrl\"\n          class=\"flex h-full w-full animate-pulse items-center justify-center bg-gray-200 dark:bg-gray-700\"\n        >\n          <svg\n            class=\"h-12 w-12 text-gray-400\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            viewBox=\"0 0 24 24\"\n          >\n            <path\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n              stroke-width=\"2\"\n              d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\"\n            />\n          </svg>\n        </div>\n        <img\n          *ngIf=\"imageUrl\"\n          [src]=\"imageUrl\"\n          [alt]=\"imageAlt\"\n          class=\"h-full w-full object-cover\"\n        />\n      </div>\n    </div>\n\n    <!-- Right Image -->\n    <div *ngIf=\"shouldShowImage('right')\" [class]=\"mediaClasses\">\n      <div\n        *ngIf=\"!imageUrl\"\n        class=\"flex h-full w-full animate-pulse items-center justify-center bg-gray-200 dark:bg-gray-700\"\n      >\n        <svg\n          class=\"h-12 w-12 text-gray-400\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            stroke-width=\"2\"\n            d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\"\n          />\n        </svg>\n      </div>\n      <img\n        *ngIf=\"imageUrl\"\n        [src]=\"imageUrl\"\n        [alt]=\"imageAlt\"\n        class=\"h-full w-full object-cover\"\n      />\n    </div>\n  </div>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "footer",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 183,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "imageAlt",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 180,
          "type": "string",
          "decorators": []
        },
        {
          "name": "imagePosition",
          "defaultValue": "\"top\"",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 181,
          "type": "ImagePosition",
          "decorators": []
        },
        {
          "name": "imageSize",
          "defaultValue": "\"medium\"",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 182,
          "type": "ImageSize",
          "decorators": []
        },
        {
          "name": "imageUrl",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 179,
          "type": "string",
          "decorators": []
        },
        {
          "name": "padding",
          "defaultValue": "\"medium\"",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 176,
          "type": "CardPadding",
          "decorators": []
        },
        {
          "name": "subtitle",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 178,
          "type": "string",
          "decorators": []
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 177,
          "type": "string",
          "decorators": []
        },
        {
          "name": "variant",
          "defaultValue": "\"basic\"",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 175,
          "type": "CardVariant",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "shouldShowImage",
          "args": [
            {
              "name": "position",
              "type": "ImagePosition",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 262,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "position",
              "type": "ImagePosition",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\n\r\ntype CardVariant = \"basic\" | \"bordered\" | \"elevated\" | \"flat\";\r\ntype CardPadding = \"none\" | \"small\" | \"medium\" | \"large\";\r\ntype ImagePosition = \"top\" | \"left\" | \"right\" | \"bottom\" | \"background\";\r\ntype ImageSize = \"small\" | \"medium\" | \"large\" | \"full\";\r\n\r\n@Component({\r\n  selector: \"app-card\",\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: `\r\n    <div [class]=\"cardClasses\" [ngStyle]=\"backgroundImageStyle\">\r\n      <!-- Background Image Placeholder -->\r\n      <div\r\n        *ngIf=\"shouldShowImage('background')\"\r\n        class=\"absolute inset-0 flex animate-pulse items-center justify-center bg-gray-200 dark:bg-gray-700\"\r\n      >\r\n        <svg\r\n          class=\"h-12 w-12 text-gray-400\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          viewBox=\"0 0 24 24\"\r\n        >\r\n          <path\r\n            stroke-linecap=\"round\"\r\n            stroke-linejoin=\"round\"\r\n            stroke-width=\"2\"\r\n            d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\"\r\n          />\r\n        </svg>\r\n      </div>\r\n\r\n      <div [class]=\"containerClasses\">\r\n        <!-- Left Image -->\r\n        <div *ngIf=\"shouldShowImage('left')\" [class]=\"mediaClasses\">\r\n          <div\r\n            *ngIf=\"!imageUrl\"\r\n            class=\"flex h-full w-full animate-pulse items-center justify-center bg-gray-200 dark:bg-gray-700\"\r\n          >\r\n            <svg\r\n              class=\"h-12 w-12 text-gray-400\"\r\n              fill=\"none\"\r\n              stroke=\"currentColor\"\r\n              viewBox=\"0 0 24 24\"\r\n            >\r\n              <path\r\n                stroke-linecap=\"round\"\r\n                stroke-linejoin=\"round\"\r\n                stroke-width=\"2\"\r\n                d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\"\r\n              />\r\n            </svg>\r\n          </div>\r\n          <img\r\n            *ngIf=\"imageUrl\"\r\n            [src]=\"imageUrl\"\r\n            [alt]=\"imageAlt\"\r\n            class=\"h-full w-full object-cover\"\r\n          />\r\n        </div>\r\n\r\n        <div class=\"relative flex flex-1 flex-col\">\r\n          <!-- Top Image -->\r\n          <div *ngIf=\"shouldShowImage('top')\" [class]=\"mediaClasses\">\r\n            <div\r\n              *ngIf=\"!imageUrl\"\r\n              class=\"flex h-full w-full animate-pulse items-center justify-center bg-gray-200 dark:bg-gray-700\"\r\n            >\r\n              <svg\r\n                class=\"h-12 w-12 text-gray-400\"\r\n                fill=\"none\"\r\n                stroke=\"currentColor\"\r\n                viewBox=\"0 0 24 24\"\r\n              >\r\n                <path\r\n                  stroke-linecap=\"round\"\r\n                  stroke-linejoin=\"round\"\r\n                  stroke-width=\"2\"\r\n                  d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\"\r\n                />\r\n              </svg>\r\n            </div>\r\n            <img\r\n              *ngIf=\"imageUrl\"\r\n              [src]=\"imageUrl\"\r\n              [alt]=\"imageAlt\"\r\n              class=\"h-full w-full object-cover\"\r\n            />\r\n          </div>\r\n\r\n          <!-- Card Header -->\r\n          <div *ngIf=\"title || subtitle\" [class]=\"headerClasses\">\r\n            <div *ngIf=\"title\" class=\"text-lg font-semibold\">{{ title }}</div>\r\n            <div\r\n              *ngIf=\"subtitle\"\r\n              class=\"text-sm text-gray-600 dark:text-gray-400\"\r\n            >\r\n              {{ subtitle }}\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Card Content -->\r\n          <div [class]=\"contentClasses\">\r\n            <ng-content></ng-content>\r\n          </div>\r\n\r\n          <!-- Card Footer -->\r\n          <div *ngIf=\"footer\" [class]=\"footerClasses\">\r\n            <ng-content select=\"[footer]\"></ng-content>\r\n          </div>\r\n\r\n          <!-- Bottom Image -->\r\n          <div *ngIf=\"shouldShowImage('bottom')\" [class]=\"mediaClasses\">\r\n            <div\r\n              *ngIf=\"!imageUrl\"\r\n              class=\"flex h-full w-full animate-pulse items-center justify-center bg-gray-200 dark:bg-gray-700\"\r\n            >\r\n              <svg\r\n                class=\"h-12 w-12 text-gray-400\"\r\n                fill=\"none\"\r\n                stroke=\"currentColor\"\r\n                viewBox=\"0 0 24 24\"\r\n              >\r\n                <path\r\n                  stroke-linecap=\"round\"\r\n                  stroke-linejoin=\"round\"\r\n                  stroke-width=\"2\"\r\n                  d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\"\r\n                />\r\n              </svg>\r\n            </div>\r\n            <img\r\n              *ngIf=\"imageUrl\"\r\n              [src]=\"imageUrl\"\r\n              [alt]=\"imageAlt\"\r\n              class=\"h-full w-full object-cover\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Right Image -->\r\n        <div *ngIf=\"shouldShowImage('right')\" [class]=\"mediaClasses\">\r\n          <div\r\n            *ngIf=\"!imageUrl\"\r\n            class=\"flex h-full w-full animate-pulse items-center justify-center bg-gray-200 dark:bg-gray-700\"\r\n          >\r\n            <svg\r\n              class=\"h-12 w-12 text-gray-400\"\r\n              fill=\"none\"\r\n              stroke=\"currentColor\"\r\n              viewBox=\"0 0 24 24\"\r\n            >\r\n              <path\r\n                stroke-linecap=\"round\"\r\n                stroke-linejoin=\"round\"\r\n                stroke-width=\"2\"\r\n                d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\"\r\n              />\r\n            </svg>\r\n          </div>\r\n          <img\r\n            *ngIf=\"imageUrl\"\r\n            [src]=\"imageUrl\"\r\n            [alt]=\"imageAlt\"\r\n            class=\"h-full w-full object-cover\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n})\r\nexport class CardComponent {\r\n  @Input() variant: CardVariant = \"basic\";\r\n  @Input() padding: CardPadding = \"medium\";\r\n  @Input() title?: string;\r\n  @Input() subtitle?: string;\r\n  @Input() imageUrl?: string;\r\n  @Input() imageAlt?: string;\r\n  @Input() imagePosition: ImagePosition = \"top\";\r\n  @Input() imageSize: ImageSize = \"medium\";\r\n  @Input() footer: boolean = false;\r\n\r\n  get containerClasses(): string {\r\n    return this.imagePosition === \"left\" || this.imagePosition === \"right\"\r\n      ? \"flex\"\r\n      : \"\";\r\n  }\r\n\r\n  get cardClasses(): string {\r\n    const baseClasses = \"overflow-hidden rounded-lg relative\";\r\n\r\n    const variantClasses = {\r\n      basic: \"bg-white dark:bg-gray-800\",\r\n      bordered:\r\n        \"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700\",\r\n      elevated: \"bg-white dark:bg-gray-800 shadow-lg\",\r\n      flat: \"bg-gray-50 dark:bg-gray-900\",\r\n    };\r\n\r\n    const backgroundClasses =\r\n      this.imagePosition === \"background\" ? \"text-white relative\" : \"\";\r\n\r\n    return `${baseClasses} ${variantClasses[this.variant]} ${backgroundClasses}`;\r\n  }\r\n\r\n  get paddingClasses(): string {\r\n    return {\r\n      none: \"\",\r\n      small: \"p-2\",\r\n      medium: \"p-4\",\r\n      large: \"p-6\",\r\n    }[this.padding];\r\n  }\r\n\r\n  get headerClasses(): string {\r\n    return `${this.paddingClasses} border-b border-gray-200 dark:border-gray-700`;\r\n  }\r\n\r\n  get mediaClasses(): string {\r\n    const baseClasses = \"overflow-hidden\";\r\n\r\n    if (this.imagePosition === \"left\" || this.imagePosition === \"right\") {\r\n      const sizeClasses = {\r\n        small: \"w-32\",\r\n        medium: \"w-48\",\r\n        large: \"w-64\",\r\n        full: \"w-1/2\",\r\n      };\r\n      return `${baseClasses} ${sizeClasses[this.imageSize]}`;\r\n    }\r\n\r\n    const heightClasses = {\r\n      small: \"h-32\",\r\n      medium: \"h-48\",\r\n      large: \"h-64\",\r\n      full: \"aspect-video\",\r\n    };\r\n    return `${baseClasses} ${heightClasses[this.imageSize]}`;\r\n  }\r\n\r\n  get backgroundImageStyle() {\r\n    if (this.imagePosition === \"background\" && this.imageUrl) {\r\n      return {\r\n        \"background-image\": `linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.7)), url(${this.imageUrl})`,\r\n        \"background-size\": \"cover\",\r\n        \"background-position\": \"center\",\r\n      };\r\n    }\r\n    return {};\r\n  }\r\n\r\n  get contentClasses(): string {\r\n    return this.paddingClasses;\r\n  }\r\n\r\n  get footerClasses(): string {\r\n    return `${this.paddingClasses} border-t border-gray-200 dark:border-gray-700`;\r\n  }\r\n\r\n  shouldShowImage(position: ImagePosition): boolean {\r\n    return (\r\n      this.imagePosition === position ||\r\n      (!this.imageUrl && this.imagePosition === position)\r\n    );\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "extends": [],
      "accessors": {
        "containerClasses": {
          "name": "containerClasses",
          "getSignature": {
            "name": "containerClasses",
            "type": "string",
            "returnType": "string",
            "line": 185
          }
        },
        "cardClasses": {
          "name": "cardClasses",
          "getSignature": {
            "name": "cardClasses",
            "type": "string",
            "returnType": "string",
            "line": 191
          }
        },
        "paddingClasses": {
          "name": "paddingClasses",
          "getSignature": {
            "name": "paddingClasses",
            "type": "string",
            "returnType": "string",
            "line": 208
          }
        },
        "headerClasses": {
          "name": "headerClasses",
          "getSignature": {
            "name": "headerClasses",
            "type": "string",
            "returnType": "string",
            "line": 217
          }
        },
        "mediaClasses": {
          "name": "mediaClasses",
          "getSignature": {
            "name": "mediaClasses",
            "type": "string",
            "returnType": "string",
            "line": 221
          }
        },
        "backgroundImageStyle": {
          "name": "backgroundImageStyle",
          "getSignature": {
            "name": "backgroundImageStyle",
            "type": "",
            "returnType": "",
            "line": 243
          }
        },
        "contentClasses": {
          "name": "contentClasses",
          "getSignature": {
            "name": "contentClasses",
            "type": "string",
            "returnType": "string",
            "line": 254
          }
        },
        "footerClasses": {
          "name": "footerClasses",
          "getSignature": {
            "name": "footerClasses",
            "type": "string",
            "returnType": "string",
            "line": 258
          }
        }
      }
    },
    {
      "name": "GridLayoutComponent",
      "id": "component-GridLayoutComponent-4cfc7a48127290e4b7ee5cf4928fa9141775d1e5b7ff776d41eb6b5dc354bce1537a09c181eab48165f4f1cdc89f9a4dfb4f421b1aa32a05fefc252e828a4fbe",
      "file": "src/app/components/grid/grid-layout.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-grid-layout",
      "styleUrls": [],
      "styles": [],
      "template": "<div [class]=\"containerClasses\">\n  <div [class]=\"gridClasses\">\n    <ng-content></ng-content>\n  </div>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "cols",
          "defaultValue": "3",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "\"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"12\"",
          "decorators": []
        },
        {
          "name": "gap",
          "defaultValue": "\"medium\"",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "\"none\" | \"small\" | \"medium\" | \"large\"",
          "decorators": []
        },
        {
          "name": "padding",
          "defaultValue": "\"medium\"",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "\"none\" | \"small\" | \"medium\" | \"large\"",
          "decorators": []
        },
        {
          "name": "responsive",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\n\r\n@Component({\r\n  selector: \"app-grid-layout\",\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: `\r\n    <div [class]=\"containerClasses\">\r\n      <div [class]=\"gridClasses\">\r\n        <ng-content></ng-content>\r\n      </div>\r\n    </div>\r\n  `,\r\n})\r\nexport class GridLayoutComponent {\r\n  @Input() cols: 1 | 2 | 3 | 4 | 5 | 6 | 12 = 3;\r\n  @Input() gap: \"none\" | \"small\" | \"medium\" | \"large\" = \"medium\";\r\n  @Input() padding: \"none\" | \"small\" | \"medium\" | \"large\" = \"medium\";\r\n  @Input() responsive: boolean = true;\r\n\r\n  get containerClasses(): string {\r\n    const paddingClasses = {\r\n      none: \"\",\r\n      small: \"p-2\",\r\n      medium: \"p-4\",\r\n      large: \"p-6\",\r\n    };\r\n\r\n    return paddingClasses[this.padding];\r\n  }\r\n\r\n  get gridClasses(): string {\r\n    const baseClasses = \"grid\";\r\n\r\n    const gapClasses = {\r\n      none: \"gap-0\",\r\n      small: \"gap-2\",\r\n      medium: \"gap-4\",\r\n      large: \"gap-6\",\r\n    };\r\n\r\n    const colClasses = {\r\n      1: \"grid-cols-1\",\r\n      2: \"grid-cols-2\",\r\n      3: \"grid-cols-3\",\r\n      4: \"grid-cols-4\",\r\n      5: \"grid-cols-5\",\r\n      6: \"grid-cols-6\",\r\n      12: \"grid-cols-12\",\r\n    };\r\n\r\n    const responsiveClasses = this.responsive\r\n      ? \"grid-cols-1 sm:grid-cols-2 md:\" + colClasses[this.cols]\r\n      : colClasses[this.cols];\r\n\r\n    return `${baseClasses} ${gapClasses[this.gap]} ${responsiveClasses}`;\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "extends": [],
      "accessors": {
        "containerClasses": {
          "name": "containerClasses",
          "getSignature": {
            "name": "containerClasses",
            "type": "string",
            "returnType": "string",
            "line": 22
          }
        },
        "gridClasses": {
          "name": "gridClasses",
          "getSignature": {
            "name": "gridClasses",
            "type": "string",
            "returnType": "string",
            "line": 33
          }
        }
      }
    },
    {
      "name": "NavbarComponent",
      "id": "component-NavbarComponent-daa63eedfa63f342718eeea43b0b9b2b90ff8fe71a62e93b7e6463ac281fe1e944674173cf37dd86b4c997c62eb6784bc1f5e9b56cd50e411e45bba5071ec14f",
      "file": "src/app/components/navbar/navbar.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-navbar",
      "styleUrls": [],
      "styles": [],
      "template": "<nav [class]=\"containerClasses\">\n  <div class=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n    <div class=\"flex h-16 items-center justify-between\">\n      <!-- Logo/Brand -->\n      <div class=\"flex-shrink-0\">\n        <span class=\"text-xl font-semibold\">{{ brand }}</span>\n      </div>\n\n      <!-- Desktop Menu -->\n      <div class=\"hidden md:block\">\n        <div class=\"ml-10 flex items-baseline space-x-4\">\n          <ng-container *ngFor=\"let item of menuItems\">\n            <a [class]=\"getLinkClasses(item.active)\" [href]=\"item.href\">\n              {{ item.label }}\n            </a>\n          </ng-container>\n        </div>\n      </div>\n\n      <!-- Mobile menu button -->\n      <div class=\"md:hidden\">\n        <button\n          type=\"button\"\n          (click)=\"isOpen = !isOpen\"\n          [class]=\"mobileButtonClasses\"\n        >\n          <span class=\"sr-only\">Open main menu</span>\n          <!-- Icon when menu is closed -->\n          <svg\n            *ngIf=\"!isOpen\"\n            class=\"block h-6 w-6\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke=\"currentColor\"\n          >\n            <path\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n              stroke-width=\"2\"\n              d=\"M4 6h16M4 12h16M4 18h16\"\n            />\n          </svg>\n          <!-- Icon when menu is open -->\n          <svg\n            *ngIf=\"isOpen\"\n            class=\"block h-6 w-6\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke=\"currentColor\"\n          >\n            <path\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n              stroke-width=\"2\"\n              d=\"M6 18L18 6M6 6l12 12\"\n            />\n          </svg>\n        </button>\n      </div>\n    </div>\n  </div>\n\n  <!-- Mobile menu -->\n  <div class=\"md:hidden\" [class.block]=\"isOpen\" [class.hidden]=\"!isOpen\">\n    <div class=\"space-y-1 px-2 pb-3 pt-2 sm:px-3\">\n      <ng-container *ngFor=\"let item of menuItems\">\n        <a [class]=\"getMobileLinkClasses(item.active)\" [href]=\"item.href\">\n          {{ item.label }}\n        </a>\n      </ng-container>\n    </div>\n  </div>\n</nav>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "brand",
          "defaultValue": "\"Brand\"",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 86,
          "type": "string",
          "decorators": []
        },
        {
          "name": "menuItems",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 87,
          "type": "Array<literal type>",
          "decorators": []
        },
        {
          "name": "variant",
          "defaultValue": "\"light\"",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 85,
          "type": "\"light\" | \"dark\"",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "isOpen",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 93
        }
      ],
      "methodsClass": [
        {
          "name": "getLinkClasses",
          "args": [
            {
              "name": "isActive",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false"
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 110,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "isActive",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getMobileLinkClasses",
          "args": [
            {
              "name": "isActive",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false"
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 124,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "isActive",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\n\r\n@Component({\r\n  selector: \"app-navbar\",\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: `\r\n    <nav [class]=\"containerClasses\">\r\n      <div class=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\r\n        <div class=\"flex h-16 items-center justify-between\">\r\n          <!-- Logo/Brand -->\r\n          <div class=\"flex-shrink-0\">\r\n            <span class=\"text-xl font-semibold\">{{ brand }}</span>\r\n          </div>\r\n\r\n          <!-- Desktop Menu -->\r\n          <div class=\"hidden md:block\">\r\n            <div class=\"ml-10 flex items-baseline space-x-4\">\r\n              <ng-container *ngFor=\"let item of menuItems\">\r\n                <a [class]=\"getLinkClasses(item.active)\" [href]=\"item.href\">\r\n                  {{ item.label }}\r\n                </a>\r\n              </ng-container>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Mobile menu button -->\r\n          <div class=\"md:hidden\">\r\n            <button\r\n              type=\"button\"\r\n              (click)=\"isOpen = !isOpen\"\r\n              [class]=\"mobileButtonClasses\"\r\n            >\r\n              <span class=\"sr-only\">Open main menu</span>\r\n              <!-- Icon when menu is closed -->\r\n              <svg\r\n                *ngIf=\"!isOpen\"\r\n                class=\"block h-6 w-6\"\r\n                fill=\"none\"\r\n                viewBox=\"0 0 24 24\"\r\n                stroke=\"currentColor\"\r\n              >\r\n                <path\r\n                  stroke-linecap=\"round\"\r\n                  stroke-linejoin=\"round\"\r\n                  stroke-width=\"2\"\r\n                  d=\"M4 6h16M4 12h16M4 18h16\"\r\n                />\r\n              </svg>\r\n              <!-- Icon when menu is open -->\r\n              <svg\r\n                *ngIf=\"isOpen\"\r\n                class=\"block h-6 w-6\"\r\n                fill=\"none\"\r\n                viewBox=\"0 0 24 24\"\r\n                stroke=\"currentColor\"\r\n              >\r\n                <path\r\n                  stroke-linecap=\"round\"\r\n                  stroke-linejoin=\"round\"\r\n                  stroke-width=\"2\"\r\n                  d=\"M6 18L18 6M6 6l12 12\"\r\n                />\r\n              </svg>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Mobile menu -->\r\n      <div class=\"md:hidden\" [class.block]=\"isOpen\" [class.hidden]=\"!isOpen\">\r\n        <div class=\"space-y-1 px-2 pb-3 pt-2 sm:px-3\">\r\n          <ng-container *ngFor=\"let item of menuItems\">\r\n            <a [class]=\"getMobileLinkClasses(item.active)\" [href]=\"item.href\">\r\n              {{ item.label }}\r\n            </a>\r\n          </ng-container>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  `,\r\n})\r\nexport class NavbarComponent {\r\n  @Input() variant: \"light\" | \"dark\" = \"light\";\r\n  @Input() brand: string = \"Brand\";\r\n  @Input() menuItems: Array<{\r\n    label: string;\r\n    href: string;\r\n    active?: boolean;\r\n  }> = [];\r\n\r\n  isOpen = false;\r\n\r\n  get containerClasses(): string {\r\n    return this.variant === \"light\" ? \"bg-white shadow\" : \"bg-gray-800\";\r\n  }\r\n\r\n  get mobileButtonClasses(): string {\r\n    return `\r\n      inline-flex items-center justify-center p-2 rounded-md\r\n      ${\r\n        this.variant === \"light\"\r\n          ? \"text-gray-400 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500\"\r\n          : \"text-gray-400 hover:text-white hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white\"\r\n      }\r\n    `;\r\n  }\r\n\r\n  getLinkClasses(isActive: boolean = false): string {\r\n    const baseClasses = \"px-3 py-2 rounded-md text-sm font-medium\";\r\n\r\n    if (this.variant === \"light\") {\r\n      return isActive\r\n        ? `${baseClasses} bg-blue-100 text-blue-700`\r\n        : `${baseClasses} text-gray-700 hover:text-gray-900 hover:bg-gray-100`;\r\n    } else {\r\n      return isActive\r\n        ? `${baseClasses} bg-gray-900 text-white`\r\n        : `${baseClasses} text-gray-300 hover:text-white hover:bg-gray-700`;\r\n    }\r\n  }\r\n\r\n  getMobileLinkClasses(isActive: boolean = false): string {\r\n    const baseClasses = \"block px-3 py-2 rounded-md text-base font-medium\";\r\n\r\n    if (this.variant === \"light\") {\r\n      return isActive\r\n        ? `${baseClasses} bg-blue-100 text-blue-700`\r\n        : `${baseClasses} text-gray-700 hover:text-gray-900 hover:bg-gray-100`;\r\n    } else {\r\n      return isActive\r\n        ? `${baseClasses} bg-gray-900 text-white`\r\n        : `${baseClasses} text-gray-300 hover:text-white hover:bg-gray-700`;\r\n    }\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "extends": [],
      "accessors": {
        "containerClasses": {
          "name": "containerClasses",
          "getSignature": {
            "name": "containerClasses",
            "type": "string",
            "returnType": "string",
            "line": 95
          }
        },
        "mobileButtonClasses": {
          "name": "mobileButtonClasses",
          "getSignature": {
            "name": "mobileButtonClasses",
            "type": "string",
            "returnType": "string",
            "line": 99
          }
        }
      }
    },
    {
      "name": "SidemenuComponent",
      "id": "component-SidemenuComponent-3959c4d406b1c0c55f11136ef6e5e41c35299e85382f8693e5856addd5cd88a60c6f346401026017ebf231ccc8e53213e6d415a44268f6be4e70e917e335192e",
      "file": "src/app/components/sidemenu/sidemenu.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-sidemenu",
      "styleUrls": [],
      "styles": [],
      "template": "<div class=\"flex h-screen\">\n  <!-- Sidebar -->\n  <div [class]=\"containerClasses\">\n    <!-- Logo section -->\n    <div class=\"flex h-16 items-center border-b px-4\">\n      <span class=\"text-lg font-semibold\">{{ brand }}</span>\n    </div>\n\n    <!-- Menu items -->\n    <nav class=\"flex-1 space-y-1 px-2 py-4\">\n      <ng-container *ngFor=\"let item of menuItems\">\n        <!-- Item with children -->\n        <div *ngIf=\"item.children; else singleItem\" class=\"space-y-1\">\n          <button\n            (click)=\"toggleSubmenu(item)\"\n            [class]=\"getParentMenuClasses(item.active)\"\n          >\n            <span class=\"flex items-center\">\n              <span\n                *ngIf=\"item.leftIcon\"\n                class=\"mr-2\"\n                [innerHTML]=\"sanitizeIcon(item.leftIcon)\"\n              ></span>\n              <span\n                *ngIf=\"item.icon\"\n                class=\"mr-3\"\n                [innerHTML]=\"sanitizeIcon(item.icon)\"\n              ></span>\n              {{ item.label }}\n              <span *ngIf=\"item.badge\" [class]=\"getBadgeClasses()\">\n                {{ item.badge }}\n              </span>\n            </span>\n            <span class=\"ml-auto\">\n              <svg\n                [class]=\"item.active ? 'rotate-180 transform' : ''\"\n                class=\"h-4 w-4 transition-transform\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n              >\n                <path\n                  stroke-linecap=\"round\"\n                  stroke-linejoin=\"round\"\n                  stroke-width=\"2\"\n                  d=\"M19 9l-7 7-7-7\"\n                />\n              </svg>\n            </span>\n          </button>\n\n          <!-- Submenu -->\n          <div *ngIf=\"item.active\" class=\"space-y-1 pl-4\">\n            <a\n              *ngFor=\"let child of item.children\"\n              [href]=\"child.href\"\n              [class]=\"getSubmenuClasses(child.active)\"\n            >\n              <span class=\"flex w-full items-center justify-between\">\n                <span class=\"flex items-center\">\n                  <span\n                    *ngIf=\"child.leftIcon\"\n                    class=\"mr-2\"\n                    [innerHTML]=\"sanitizeIcon(child.leftIcon)\"\n                  ></span>\n                  <span\n                    *ngIf=\"child.icon\"\n                    class=\"mr-3\"\n                    [innerHTML]=\"sanitizeIcon(child.icon)\"\n                  ></span>\n                  {{ child.label }}\n                </span>\n                <span *ngIf=\"child.badge\" [class]=\"getBadgeClasses()\">\n                  {{ child.badge }}\n                </span>\n              </span>\n            </a>\n          </div>\n        </div>\n\n        <!-- Single item -->\n        <ng-template #singleItem>\n          <a [href]=\"item.href\" [class]=\"getMenuItemClasses(item.active)\">\n            <span class=\"flex w-full items-center justify-between\">\n              <span class=\"flex items-center\">\n                <span\n                  *ngIf=\"item.leftIcon\"\n                  class=\"mr-2\"\n                  [innerHTML]=\"sanitizeIcon(item.leftIcon)\"\n                ></span>\n                <span\n                  *ngIf=\"item.icon\"\n                  class=\"mr-3\"\n                  [innerHTML]=\"sanitizeIcon(item.icon)\"\n                ></span>\n                {{ item.label }}\n              </span>\n              <span *ngIf=\"item.badge\" [class]=\"getBadgeClasses()\">\n                {{ item.badge }}\n              </span>\n            </span>\n          </a>\n        </ng-template>\n      </ng-container>\n    </nav>\n  </div>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "brand",
          "defaultValue": "\"Dashboard\"",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 131,
          "type": "string",
          "decorators": []
        },
        {
          "name": "collapsed",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 133,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "menuItems",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 132,
          "type": "MenuItem[]",
          "decorators": []
        },
        {
          "name": "variant",
          "defaultValue": "\"light\"",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 130,
          "type": "\"light\" | \"dark\"",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "getBadgeClasses",
          "args": [],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 193,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "getMenuItemClasses",
          "args": [
            {
              "name": "isActive",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false"
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 148,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "isActive",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getParentMenuClasses",
          "args": [
            {
              "name": "isActive",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false"
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 163,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "isActive",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getSubmenuClasses",
          "args": [
            {
              "name": "isActive",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false"
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 178,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "isActive",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "sanitizeIcon",
          "args": [
            {
              "name": "icon",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "SafeHtml",
          "typeParameters": [],
          "line": 137,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "icon",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "toggleSubmenu",
          "args": [
            {
              "name": "item",
              "type": "MenuItem",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 200,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "item",
              "type": "MenuItem",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { DomSanitizer, SafeHtml } from \"@angular/platform-browser\";\r\n\r\ninterface MenuItem {\r\n  label: string;\r\n  icon?: string;\r\n  leftIcon?: string;\r\n  href: string;\r\n  active?: boolean;\r\n  children?: MenuItem[];\r\n  badge?: string;\r\n}\r\n\r\n@Component({\r\n  selector: \"app-sidemenu\",\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: `\r\n    <div class=\"flex h-screen\">\r\n      <!-- Sidebar -->\r\n      <div [class]=\"containerClasses\">\r\n        <!-- Logo section -->\r\n        <div class=\"flex h-16 items-center border-b px-4\">\r\n          <span class=\"text-lg font-semibold\">{{ brand }}</span>\r\n        </div>\r\n\r\n        <!-- Menu items -->\r\n        <nav class=\"flex-1 space-y-1 px-2 py-4\">\r\n          <ng-container *ngFor=\"let item of menuItems\">\r\n            <!-- Item with children -->\r\n            <div *ngIf=\"item.children; else singleItem\" class=\"space-y-1\">\r\n              <button\r\n                (click)=\"toggleSubmenu(item)\"\r\n                [class]=\"getParentMenuClasses(item.active)\"\r\n              >\r\n                <span class=\"flex items-center\">\r\n                  <span\r\n                    *ngIf=\"item.leftIcon\"\r\n                    class=\"mr-2\"\r\n                    [innerHTML]=\"sanitizeIcon(item.leftIcon)\"\r\n                  ></span>\r\n                  <span\r\n                    *ngIf=\"item.icon\"\r\n                    class=\"mr-3\"\r\n                    [innerHTML]=\"sanitizeIcon(item.icon)\"\r\n                  ></span>\r\n                  {{ item.label }}\r\n                  <span *ngIf=\"item.badge\" [class]=\"getBadgeClasses()\">\r\n                    {{ item.badge }}\r\n                  </span>\r\n                </span>\r\n                <span class=\"ml-auto\">\r\n                  <svg\r\n                    [class]=\"item.active ? 'rotate-180 transform' : ''\"\r\n                    class=\"h-4 w-4 transition-transform\"\r\n                    fill=\"none\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    stroke=\"currentColor\"\r\n                  >\r\n                    <path\r\n                      stroke-linecap=\"round\"\r\n                      stroke-linejoin=\"round\"\r\n                      stroke-width=\"2\"\r\n                      d=\"M19 9l-7 7-7-7\"\r\n                    />\r\n                  </svg>\r\n                </span>\r\n              </button>\r\n\r\n              <!-- Submenu -->\r\n              <div *ngIf=\"item.active\" class=\"space-y-1 pl-4\">\r\n                <a\r\n                  *ngFor=\"let child of item.children\"\r\n                  [href]=\"child.href\"\r\n                  [class]=\"getSubmenuClasses(child.active)\"\r\n                >\r\n                  <span class=\"flex w-full items-center justify-between\">\r\n                    <span class=\"flex items-center\">\r\n                      <span\r\n                        *ngIf=\"child.leftIcon\"\r\n                        class=\"mr-2\"\r\n                        [innerHTML]=\"sanitizeIcon(child.leftIcon)\"\r\n                      ></span>\r\n                      <span\r\n                        *ngIf=\"child.icon\"\r\n                        class=\"mr-3\"\r\n                        [innerHTML]=\"sanitizeIcon(child.icon)\"\r\n                      ></span>\r\n                      {{ child.label }}\r\n                    </span>\r\n                    <span *ngIf=\"child.badge\" [class]=\"getBadgeClasses()\">\r\n                      {{ child.badge }}\r\n                    </span>\r\n                  </span>\r\n                </a>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Single item -->\r\n            <ng-template #singleItem>\r\n              <a [href]=\"item.href\" [class]=\"getMenuItemClasses(item.active)\">\r\n                <span class=\"flex w-full items-center justify-between\">\r\n                  <span class=\"flex items-center\">\r\n                    <span\r\n                      *ngIf=\"item.leftIcon\"\r\n                      class=\"mr-2\"\r\n                      [innerHTML]=\"sanitizeIcon(item.leftIcon)\"\r\n                    ></span>\r\n                    <span\r\n                      *ngIf=\"item.icon\"\r\n                      class=\"mr-3\"\r\n                      [innerHTML]=\"sanitizeIcon(item.icon)\"\r\n                    ></span>\r\n                    {{ item.label }}\r\n                  </span>\r\n                  <span *ngIf=\"item.badge\" [class]=\"getBadgeClasses()\">\r\n                    {{ item.badge }}\r\n                  </span>\r\n                </span>\r\n              </a>\r\n            </ng-template>\r\n          </ng-container>\r\n        </nav>\r\n      </div>\r\n    </div>\r\n  `,\r\n})\r\nexport class SidemenuComponent {\r\n  @Input() variant: \"light\" | \"dark\" = \"light\";\r\n  @Input() brand: string = \"Dashboard\";\r\n  @Input() menuItems: MenuItem[] = [];\r\n  @Input() collapsed: boolean = false;\r\n\r\n  constructor(private sanitizer: DomSanitizer) {}\r\n\r\n  sanitizeIcon(icon: string): SafeHtml {\r\n    return this.sanitizer.bypassSecurityTrustHtml(icon);\r\n  }\r\n\r\n  get containerClasses(): string {\r\n    const baseClasses = \"flex flex-col w-64 transition-all duration-300\";\r\n    return this.variant === \"light\"\r\n      ? `${baseClasses} bg-white border-r`\r\n      : `${baseClasses} bg-gray-800 border-gray-700`;\r\n  }\r\n\r\n  getMenuItemClasses(isActive: boolean = false): string {\r\n    const baseClasses =\r\n      \"flex items-center px-4 py-2 text-sm rounded-md transition-colors\";\r\n\r\n    if (this.variant === \"light\") {\r\n      return isActive\r\n        ? `${baseClasses} bg-blue-100 text-blue-700`\r\n        : `${baseClasses} text-gray-700 hover:bg-gray-100`;\r\n    } else {\r\n      return isActive\r\n        ? `${baseClasses} bg-gray-900 text-white`\r\n        : `${baseClasses} text-gray-300 hover:bg-gray-700 hover:text-white`;\r\n    }\r\n  }\r\n\r\n  getParentMenuClasses(isActive: boolean = false): string {\r\n    const baseClasses =\r\n      \"flex items-center justify-between w-full px-4 py-2 text-sm rounded-md transition-colors\";\r\n\r\n    if (this.variant === \"light\") {\r\n      return isActive\r\n        ? `${baseClasses} bg-gray-100 text-gray-900`\r\n        : `${baseClasses} text-gray-700 hover:bg-gray-100`;\r\n    } else {\r\n      return isActive\r\n        ? `${baseClasses} bg-gray-700 text-white`\r\n        : `${baseClasses} text-gray-300 hover:bg-gray-700 hover:text-white`;\r\n    }\r\n  }\r\n\r\n  getSubmenuClasses(isActive: boolean = false): string {\r\n    const baseClasses =\r\n      \"flex items-center px-4 py-2 text-sm rounded-md transition-colors\";\r\n\r\n    if (this.variant === \"light\") {\r\n      return isActive\r\n        ? `${baseClasses} bg-blue-50 text-blue-700`\r\n        : `${baseClasses} text-gray-600 hover:bg-gray-50`;\r\n    } else {\r\n      return isActive\r\n        ? `${baseClasses} bg-gray-700 text-white`\r\n        : `${baseClasses} text-gray-400 hover:bg-gray-700 hover:text-white`;\r\n    }\r\n  }\r\n\r\n  getBadgeClasses(): string {\r\n    const baseClasses = \"ml-2 px-2 py-0.5 text-xs font-medium rounded-full\";\r\n    return this.variant === \"light\"\r\n      ? `${baseClasses} bg-blue-100 text-blue-800`\r\n      : `${baseClasses} bg-gray-700 text-gray-200`;\r\n  }\r\n\r\n  toggleSubmenu(item: MenuItem): void {\r\n    item.active = !item.active;\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "sanitizer",
            "type": "DomSanitizer",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 133,
        "jsdoctags": [
          {
            "name": "sanitizer",
            "type": "DomSanitizer",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "accessors": {
        "containerClasses": {
          "name": "containerClasses",
          "getSignature": {
            "name": "containerClasses",
            "type": "string",
            "returnType": "string",
            "line": 141
          }
        }
      }
    },
    {
      "name": "TooltipComponent",
      "id": "component-TooltipComponent-eb6f2d2f7e85d2c19dad556392b2dacc0ef27c1a02b021441c37a351964e9f126cdd5946605197f40f2df57059b7ebca7f6bd3c82aeb4e71785e1fd864d46d39",
      "file": "src/app/components/tooltip/tooltip.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-tooltip",
      "styleUrls": [],
      "styles": [],
      "template": "<div class=\"relative inline-block\">\n  <!-- Tooltip trigger -->\n  <div (mouseenter)=\"show()\" (mouseleave)=\"hide()\">\n    <ng-content></ng-content>\n  </div>\n\n  <!-- Tooltip content -->\n  <div\n    *ngIf=\"isVisible\"\n    [class]=\"tooltipClasses\"\n    [style.margin-left.px]=\"\n      position === 'top' || position === 'bottom' ? offsetX : 0\n    \"\n    [style.margin-top.px]=\"\n      position === 'left' || position === 'right' ? offsetY : 0\n    \"\n  >\n    {{ content }}\n    <div [class]=\"arrowClasses\"></div>\n  </div>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "content",
          "defaultValue": "\"\"",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "string",
          "decorators": []
        },
        {
          "name": "delay",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 39,
          "type": "number",
          "decorators": []
        },
        {
          "name": "position",
          "defaultValue": "\"top\"",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 37,
          "type": "TooltipPosition",
          "decorators": []
        },
        {
          "name": "variant",
          "defaultValue": "\"dark\"",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 38,
          "type": "TooltipVariant",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "isVisible",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 41
        },
        {
          "name": "offsetX",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 42
        },
        {
          "name": "offsetY",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 43
        },
        {
          "name": "showTimeout",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "indexKey": "",
          "optional": true,
          "description": "",
          "line": 45,
          "modifierKind": [123]
        }
      ],
      "methodsClass": [
        {
          "name": "hide",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 100,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onWindowChange",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 138,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'window:scroll'"
            },
            {
              "name": "HostListener",
              "stringifiedArguments": "'window:resize'"
            }
          ],
          "modifierKind": [170, 170]
        },
        {
          "name": "show",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 88,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "updatePosition",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 107,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "window:resize",
          "args": [],
          "argsDecorator": [],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 138
        },
        {
          "name": "window:scroll",
          "args": [],
          "argsDecorator": [],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 138
        }
      ],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input, ElementRef, HostListener } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\n\r\ntype TooltipPosition = \"top\" | \"right\" | \"bottom\" | \"left\";\r\ntype TooltipVariant = \"dark\" | \"light\" | \"info\" | \"warning\" | \"error\";\r\n\r\n@Component({\r\n  selector: \"app-tooltip\",\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: `\r\n    <div class=\"relative inline-block\">\r\n      <!-- Tooltip trigger -->\r\n      <div (mouseenter)=\"show()\" (mouseleave)=\"hide()\">\r\n        <ng-content></ng-content>\r\n      </div>\r\n\r\n      <!-- Tooltip content -->\r\n      <div\r\n        *ngIf=\"isVisible\"\r\n        [class]=\"tooltipClasses\"\r\n        [style.margin-left.px]=\"\r\n          position === 'top' || position === 'bottom' ? offsetX : 0\r\n        \"\r\n        [style.margin-top.px]=\"\r\n          position === 'left' || position === 'right' ? offsetY : 0\r\n        \"\r\n      >\r\n        {{ content }}\r\n        <div [class]=\"arrowClasses\"></div>\r\n      </div>\r\n    </div>\r\n  `,\r\n})\r\nexport class TooltipComponent {\r\n  @Input() content: string = \"\";\r\n  @Input() position: TooltipPosition = \"top\";\r\n  @Input() variant: TooltipVariant = \"dark\";\r\n  @Input() delay: number = 0;\r\n\r\n  isVisible: boolean = false;\r\n  offsetX: number = 0;\r\n  offsetY: number = 0;\r\n\r\n  private showTimeout?: number;\r\n\r\n  constructor(private elementRef: ElementRef) {}\r\n\r\n  get tooltipClasses(): string {\r\n    const baseClasses =\r\n      \"absolute z-50 px-2 py-1 text-sm rounded shadow-lg whitespace-nowrap\";\r\n    const positionClasses = {\r\n      top: \"bottom-full left-1/2 transform -translate-x-1/2 mb-2\",\r\n      right: \"left-full top-1/2 transform -translate-y-1/2 ml-2\",\r\n      bottom: \"top-full left-1/2 transform -translate-x-1/2 mt-2\",\r\n      left: \"right-full top-1/2 transform -translate-y-1/2 mr-2\",\r\n    };\r\n    const variantClasses = {\r\n      dark: \"bg-gray-900 text-white\",\r\n      light: \"bg-white text-gray-900 border border-gray-200\",\r\n      info: \"bg-blue-600 text-white\",\r\n      warning: \"bg-yellow-500 text-white\",\r\n      error: \"bg-red-600 text-white\",\r\n    };\r\n\r\n    return `${baseClasses} ${positionClasses[this.position]} ${variantClasses[this.variant]}`;\r\n  }\r\n\r\n  get arrowClasses(): string {\r\n    const baseClasses = \"absolute w-2 h-2 transform rotate-45\";\r\n    const positionClasses = {\r\n      top: \"bottom-[-4px] left-1/2 -translate-x-1/2\",\r\n      right: \"left-[-4px] top-1/2 -translate-y-1/2\",\r\n      bottom: \"top-[-4px] left-1/2 -translate-x-1/2\",\r\n      left: \"right-[-4px] top-1/2 -translate-y-1/2\",\r\n    };\r\n    const variantClasses = {\r\n      dark: \"bg-gray-900\",\r\n      light: \"bg-white border-b border-r border-gray-200\",\r\n      info: \"bg-blue-600\",\r\n      warning: \"bg-yellow-500\",\r\n      error: \"bg-red-600\",\r\n    };\r\n\r\n    return `${baseClasses} ${positionClasses[this.position]} ${variantClasses[this.variant]}`;\r\n  }\r\n\r\n  show(): void {\r\n    if (this.delay) {\r\n      this.showTimeout = window.setTimeout(() => {\r\n        this.isVisible = true;\r\n        this.updatePosition();\r\n      }, this.delay);\r\n    } else {\r\n      this.isVisible = true;\r\n      this.updatePosition();\r\n    }\r\n  }\r\n\r\n  hide(): void {\r\n    if (this.showTimeout) {\r\n      clearTimeout(this.showTimeout);\r\n    }\r\n    this.isVisible = false;\r\n  }\r\n\r\n  private updatePosition(): void {\r\n    const element = this.elementRef.nativeElement as HTMLElement;\r\n    const tooltip = element.querySelector('[class*=\"absolute\"]') as HTMLElement;\r\n    if (!tooltip) return;\r\n\r\n    const tooltipRect = tooltip.getBoundingClientRect();\r\n\r\n    // Adjust position if tooltip is outside viewport\r\n    if (this.position === \"top\" || this.position === \"bottom\") {\r\n      const leftOverflow = tooltipRect.left < 0;\r\n      const rightOverflow = tooltipRect.right > window.innerWidth;\r\n\r\n      if (leftOverflow) {\r\n        this.offsetX = -tooltipRect.left + 8;\r\n      } else if (rightOverflow) {\r\n        this.offsetX = window.innerWidth - tooltipRect.right - 8;\r\n      }\r\n    } else {\r\n      const topOverflow = tooltipRect.top < 0;\r\n      const bottomOverflow = tooltipRect.bottom > window.innerHeight;\r\n\r\n      if (topOverflow) {\r\n        this.offsetY = -tooltipRect.top + 8;\r\n      } else if (bottomOverflow) {\r\n        this.offsetY = window.innerHeight - tooltipRect.bottom - 8;\r\n      }\r\n    }\r\n  }\r\n\r\n  @HostListener(\"window:scroll\")\r\n  @HostListener(\"window:resize\")\r\n  onWindowChange(): void {\r\n    if (this.isVisible) {\r\n      this.updatePosition();\r\n    }\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "elementRef",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 45,
        "jsdoctags": [
          {
            "name": "elementRef",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "accessors": {
        "tooltipClasses": {
          "name": "tooltipClasses",
          "getSignature": {
            "name": "tooltipClasses",
            "type": "string",
            "returnType": "string",
            "line": 49
          }
        },
        "arrowClasses": {
          "name": "arrowClasses",
          "getSignature": {
            "name": "arrowClasses",
            "type": "string",
            "returnType": "string",
            "line": 69
          }
        }
      }
    },
    {
      "name": "TypographyComponent",
      "id": "component-TypographyComponent-534cd32b82e8f4fef24ee2791c19262023b947d6259b656888a73e3d63f508659a9bb1621b01eb25987e984c39db697f9e919f886cd298b4ee9c957c746f84f2",
      "file": "src/app/components/typography/typography.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-typography",
      "styleUrls": [],
      "styles": [],
      "template": "<div [class]=\"classes\">\n  {{ text }}\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "text",
          "defaultValue": "\"\"",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "string",
          "decorators": []
        },
        {
          "name": "variant",
          "defaultValue": "\"body1\"",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"subtitle1\" | \"subtitle2\" | \"body1\" | \"body2\" | \"caption\"",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\n\r\n@Component({\r\n  selector: \"app-typography\",\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: `\r\n    <div [class]=\"classes\">\r\n      {{ text }}\r\n    </div>\r\n  `,\r\n})\r\nexport class TypographyComponent {\r\n  @Input() variant:\r\n    | \"h1\"\r\n    | \"h2\"\r\n    | \"h3\"\r\n    | \"h4\"\r\n    | \"subtitle1\"\r\n    | \"subtitle2\"\r\n    | \"body1\"\r\n    | \"body2\"\r\n    | \"caption\" = \"body1\";\r\n  @Input() text: string = \"\";\r\n\r\n  get classes(): string {\r\n    const variantClasses = {\r\n      h1: \"text-5xl font-bold text-gray-900 leading-tight\",\r\n      h2: \"text-4xl font-semibold text-gray-900 leading-tight\",\r\n      h3: \"text-3xl font-semibold text-gray-900 leading-snug\",\r\n      h4: \"text-2xl font-medium text-gray-900 leading-snug\",\r\n      subtitle1: \"text-xl font-medium text-gray-800 leading-relaxed\",\r\n      subtitle2: \"text-lg font-medium text-gray-800 leading-relaxed\",\r\n      body1: \"text-base text-gray-700 leading-relaxed\",\r\n      body2: \"text-sm text-gray-700 leading-relaxed\",\r\n      caption: \"text-xs text-gray-600 leading-normal\",\r\n    };\r\n\r\n    return variantClasses[this.variant];\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "extends": [],
      "accessors": {
        "classes": {
          "name": "classes",
          "getSignature": {
            "name": "classes",
            "type": "string",
            "returnType": "string",
            "line": 27
          }
        }
      }
    }
  ],
  "modules": [],
  "miscellaneous": {
    "variables": [
      {
        "name": "appConfig",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/app.config.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "ApplicationConfig",
        "defaultValue": "{\r\n  providers: [\r\n    provideZoneChangeDetection({ eventCoalescing: true }),\r\n    provideRouter(routes),\r\n  ],\r\n}"
      },
      {
        "name": "buttonVariants",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/components/button/button.component.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "cva(\"px-4 py-2 rounded-md\", {\r\n  variants: {\r\n    variant: {\r\n      primary: \"bg-blue-600 text-white hover:bg-blue-700\",\r\n      secondary: \"bg-gray-600 text-white hover:bg-gray-700\",\r\n      outline:\r\n        \"border border-blue-600 text-blue-600 hover:bg-blue-600 hover:text-white\",\r\n      danger: \"bg-red-600 text-white hover:bg-red-700\",\r\n    },\r\n    size: {\r\n      small: \"text-sm\",\r\n      medium: \"text-base\",\r\n      large: \"text-lg\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    variant: \"primary\",\r\n    size: \"medium\",\r\n  },\r\n})"
      },
      {
        "name": "Icons",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/icons.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\r\n  // Dashboard icons\r\n  dashboard: `<svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\"/>\r\n  </svg>`,\r\n\r\n  // User/Team icons\r\n  users: `<svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z\"/>\r\n  </svg>`,\r\n\r\n  // Project icons\r\n  folder: `<svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z\"/>\r\n  </svg>`,\r\n\r\n  // Settings icon\r\n  settings: `<svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\"/>\r\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\"/>\r\n  </svg>`,\r\n\r\n  // Additional icons\r\n  home: `<svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\"/>\r\n  </svg>`,\r\n\r\n  calendar: `<svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\"/>\r\n  </svg>`,\r\n\r\n  chart: `<svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\"/>\r\n  </svg>`,\r\n\r\n  document: `<svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"/>\r\n  </svg>`,\r\n\r\n  // New icons\r\n  bell: `<svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9\"/>\r\n  </svg>`,\r\n\r\n  inbox: `<svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4\"/>\r\n  </svg>`,\r\n\r\n  message: `<svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z\"/>\r\n  </svg>`,\r\n\r\n  notification: `<svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z\"/>\r\n  </svg>`,\r\n\r\n  // List item icons\r\n  chevronRight: `<svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 5l7 7-7 7\"/>\r\n  </svg>`,\r\n\r\n  arrowRight: `<svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M14 5l7 7m0 0l-7 7m7-7H3\"/>\r\n  </svg>`,\r\n\r\n  dot: `<svg class=\"w-2 h-2\" fill=\"currentColor\" viewBox=\"0 0 8 8\">\r\n    <circle cx=\"4\" cy=\"4\" r=\"3\"/>\r\n  </svg>`,\r\n\r\n  star: `<svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z\"/>\r\n  </svg>`,\r\n\r\n  // Add these missing icons\r\n  clock: `<svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\"/>\r\n  </svg>`,\r\n\r\n  download: `<svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4\"/>\r\n  </svg>`,\r\n}"
      }
    ],
    "functions": [],
    "typealiases": [
      {
        "name": "CardPadding",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"none\" | \"small\" | \"medium\" | \"large\"",
        "file": "src/app/components/card/card.component.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 192
      },
      {
        "name": "CardVariant",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"basic\" | \"bordered\" | \"elevated\" | \"flat\"",
        "file": "src/app/components/card/card.component.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 192
      },
      {
        "name": "ImagePosition",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"top\" | \"left\" | \"right\" | \"bottom\" | \"background\"",
        "file": "src/app/components/card/card.component.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 192
      },
      {
        "name": "ImageSize",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"small\" | \"medium\" | \"large\" | \"full\"",
        "file": "src/app/components/card/card.component.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 192
      },
      {
        "name": "TooltipPosition",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"top\" | \"right\" | \"bottom\" | \"left\"",
        "file": "src/app/components/tooltip/tooltip.component.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 192
      },
      {
        "name": "TooltipVariant",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"dark\" | \"light\" | \"info\" | \"warning\" | \"error\"",
        "file": "src/app/components/tooltip/tooltip.component.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 192
      }
    ],
    "enumerations": [],
    "groupedVariables": {
      "src/app/app.config.ts": [
        {
          "name": "appConfig",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/app.config.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ApplicationConfig",
          "defaultValue": "{\r\n  providers: [\r\n    provideZoneChangeDetection({ eventCoalescing: true }),\r\n    provideRouter(routes),\r\n  ],\r\n}"
        }
      ],
      "src/app/components/button/button.component.ts": [
        {
          "name": "buttonVariants",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/components/button/button.component.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "cva(\"px-4 py-2 rounded-md\", {\r\n  variants: {\r\n    variant: {\r\n      primary: \"bg-blue-600 text-white hover:bg-blue-700\",\r\n      secondary: \"bg-gray-600 text-white hover:bg-gray-700\",\r\n      outline:\r\n        \"border border-blue-600 text-blue-600 hover:bg-blue-600 hover:text-white\",\r\n      danger: \"bg-red-600 text-white hover:bg-red-700\",\r\n    },\r\n    size: {\r\n      small: \"text-sm\",\r\n      medium: \"text-base\",\r\n      large: \"text-lg\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    variant: \"primary\",\r\n    size: \"medium\",\r\n  },\r\n})"
        }
      ],
      "src/app/shared/icons.ts": [
        {
          "name": "Icons",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/icons.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\r\n  // Dashboard icons\r\n  dashboard: `<svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\"/>\r\n  </svg>`,\r\n\r\n  // User/Team icons\r\n  users: `<svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z\"/>\r\n  </svg>`,\r\n\r\n  // Project icons\r\n  folder: `<svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z\"/>\r\n  </svg>`,\r\n\r\n  // Settings icon\r\n  settings: `<svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\"/>\r\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\"/>\r\n  </svg>`,\r\n\r\n  // Additional icons\r\n  home: `<svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\"/>\r\n  </svg>`,\r\n\r\n  calendar: `<svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\"/>\r\n  </svg>`,\r\n\r\n  chart: `<svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\"/>\r\n  </svg>`,\r\n\r\n  document: `<svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"/>\r\n  </svg>`,\r\n\r\n  // New icons\r\n  bell: `<svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9\"/>\r\n  </svg>`,\r\n\r\n  inbox: `<svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4\"/>\r\n  </svg>`,\r\n\r\n  message: `<svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z\"/>\r\n  </svg>`,\r\n\r\n  notification: `<svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z\"/>\r\n  </svg>`,\r\n\r\n  // List item icons\r\n  chevronRight: `<svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 5l7 7-7 7\"/>\r\n  </svg>`,\r\n\r\n  arrowRight: `<svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M14 5l7 7m0 0l-7 7m7-7H3\"/>\r\n  </svg>`,\r\n\r\n  dot: `<svg class=\"w-2 h-2\" fill=\"currentColor\" viewBox=\"0 0 8 8\">\r\n    <circle cx=\"4\" cy=\"4\" r=\"3\"/>\r\n  </svg>`,\r\n\r\n  star: `<svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z\"/>\r\n  </svg>`,\r\n\r\n  // Add these missing icons\r\n  clock: `<svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\"/>\r\n  </svg>`,\r\n\r\n  download: `<svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4\"/>\r\n  </svg>`,\r\n}"
        }
      ]
    },
    "groupedFunctions": {},
    "groupedEnumerations": {},
    "groupedTypeAliases": {
      "src/app/components/card/card.component.ts": [
        {
          "name": "CardPadding",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"none\" | \"small\" | \"medium\" | \"large\"",
          "file": "src/app/components/card/card.component.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 192
        },
        {
          "name": "CardVariant",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"basic\" | \"bordered\" | \"elevated\" | \"flat\"",
          "file": "src/app/components/card/card.component.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 192
        },
        {
          "name": "ImagePosition",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"top\" | \"left\" | \"right\" | \"bottom\" | \"background\"",
          "file": "src/app/components/card/card.component.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 192
        },
        {
          "name": "ImageSize",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"small\" | \"medium\" | \"large\" | \"full\"",
          "file": "src/app/components/card/card.component.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 192
        }
      ],
      "src/app/components/tooltip/tooltip.component.ts": [
        {
          "name": "TooltipPosition",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"top\" | \"right\" | \"bottom\" | \"left\"",
          "file": "src/app/components/tooltip/tooltip.component.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 192
        },
        {
          "name": "TooltipVariant",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"dark\" | \"light\" | \"info\" | \"warning\" | \"error\"",
          "file": "src/app/components/tooltip/tooltip.component.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 192
        }
      ]
    }
  },
  "routes": [],
  "coverage": {
    "count": 0,
    "status": "low",
    "files": [
      {
        "filePath": "src/app/app.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "AppComponent",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/app.config.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "appConfig",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/components/button/button.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ButtonComponent",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/components/button/button.component.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "buttonVariants",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/components/card/card.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "CardComponent",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/app/components/card/card.component.ts",
        "type": "type alias",
        "linktype": "miscellaneous",
        "linksubtype": "typealias",
        "name": "CardPadding",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/components/card/card.component.ts",
        "type": "type alias",
        "linktype": "miscellaneous",
        "linksubtype": "typealias",
        "name": "CardVariant",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/components/card/card.component.ts",
        "type": "type alias",
        "linktype": "miscellaneous",
        "linksubtype": "typealias",
        "name": "ImagePosition",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/components/card/card.component.ts",
        "type": "type alias",
        "linktype": "miscellaneous",
        "linksubtype": "typealias",
        "name": "ImageSize",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/components/grid/grid-layout.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "GridLayoutComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/components/navbar/navbar.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "NavbarComponent",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/components/sidemenu/sidemenu.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "SidemenuComponent",
        "coveragePercent": 0,
        "coverageCount": "0/12",
        "status": "low"
      },
      {
        "filePath": "src/app/components/sidemenu/sidemenu.component.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "MenuItem",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/components/tooltip/tooltip.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "TooltipComponent",
        "coveragePercent": 0,
        "coverageCount": "0/16",
        "status": "low"
      },
      {
        "filePath": "src/app/components/tooltip/tooltip.component.ts",
        "type": "type alias",
        "linktype": "miscellaneous",
        "linksubtype": "typealias",
        "name": "TooltipPosition",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/components/tooltip/tooltip.component.ts",
        "type": "type alias",
        "linktype": "miscellaneous",
        "linksubtype": "typealias",
        "name": "TooltipVariant",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/components/typography/typography.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "TypographyComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/icons.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Icons",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      }
    ]
  }
}
